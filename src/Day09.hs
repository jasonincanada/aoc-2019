{-# Language LambdaCase, MultiWayIf #-}

module Day09 (part1, part2) where

{-  Advent of Code 2019 - Day 9 - https://adventofcode.com/2019/day/9 -}

import           Control.Arrow       ((>>>))
import           Control.Monad.State
import           Data.Bool           (bool)
import qualified Data.IntMap as IM
import           Data.List.Split     (splitOn)


{- Types -}

type Address = Int
type Opcode  = Int
type Input   = IM.IntMap Opcode

data Mode    = Position | Relative | Immediate

-- the state of the computer at any time
data Computer = Computer { address :: Address          -- instruction pointer
                         , memory  :: IM.IntMap Opcode -- RAM
                         , base    :: Int              -- relative base
                         , mode1   :: Mode             -- modes set by latest instruction
                         , mode2   :: Mode
                         , mode3   :: Mode
                         , inputs  :: [Int]            -- list of inputs for opcode 3
                         , outputs :: [Int]            -- outputs generated by opcode 4
                         }

data Output  = Output [Int]

instance Show Output where
  show (Output value) = show value


{- Parsing -}

parse :: String -> Input
parse = split >>> map read >>> toMap
  where
    split = splitOn ","
    toMap = IM.fromList . zip [0..]


-- init a computer with a given program and list of inputs
initComp :: IM.IntMap Opcode -> [Opcode] -> Computer
initComp program inputs = Computer 0
                                   program
                                   0
                                   Position
                                   Position
                                   Position
                                   inputs
                                   []


{- Part 1 -}

calc1 :: Input -> Output
calc1 opcodes = Output result
  where
    result = evalState process start

    -- the input list is just 1, given in the problem description
    start  = initComp opcodes [1]


process :: State Computer [Int]
process = seek 0 >> step


step :: State Computer [Int]
step = do
  ip <- gets address
  instruction <- readAt ip

  let opcode = instruction `mod` 100

  setMode 1 (getDigit 3 instruction)
  setMode 2 (getDigit 4 instruction)
  setMode 3 (getDigit 5 instruction)

  case opcode of

    -- add
    1  -> do add1   <- param 1
             add2   <- param 2
             destAt <- dest  3

             update destAt (add1+add2)

             jump 4
             step


    -- multiply
    2  -> do mul1   <- param 1
             mul2   <- param 2
             destAt <- dest  3

             update destAt (mul1*mul2)

             jump 4
             step


    -- save input
    3  -> do int    <- input
             destAt <- dest 1

             update destAt int

             jump 2
             step


    -- output
    4  -> do value <- param 1

             output value

             jump 2
             step


    -- jump-if-true
    5  -> do param1 <- param 1

             if | param1 /= 0 -> do param 2 >>= seek
                                    step
                | otherwise   -> do jump 3
                                    step


    -- jump-if-false
    6  -> do param1 <- param 1

             if | param1 == 0 -> do param 2 >>= seek
                                    step
                | otherwise   -> do jump 3
                                    step


    -- less than
    7  -> do param1 <- param 1
             param2 <- param 2
             param3 <- dest  3

             update param3 (bool 0 1 $ param1 < param2)

             jump 4
             step


    -- equals
    8  -> do param1 <- param 1
             param2 <- param 2
             param3 <- dest  3

             update param3 (bool 0 1 $ param1 == param2)

             jump 4
             step


    -- adjust relative base
    9  -> do param 1 >>= adjustBase

             jump 2
             step


    -- quit
    99 -> reverse <$> gets outputs


-- get the nth digit from the right of a base-10 integer
getDigit :: Int -> Int -> Int
getDigit i number = number `div` (10^(i-1)) `mod` 10

jump :: Int -> State Computer ()
jump n = do
  ip <- gets address
  seek (ip+n)

-- move the instruction pointer
seek :: Address -> State Computer ()
seek addy = modify (\c -> c { address = addy } )

-- adjust the relative base
adjustBase :: Int -> State Computer ()
adjustBase n = modify (\c -> c { base = base c + n })

-- get an opcode at an address
readAt :: Address -> State Computer Opcode
readAt addy = do
  memory <- gets memory

  case IM.lookup addy memory of
    Nothing -> return 0
    Just op -> return op

-- get a parameter value (which can be used in addition, mult, etc)
param :: Int -> State Computer Int
param i = do
  ip <- gets address
  readAt (ip+i) >>= getValue i

  where
    -- in Immediate mode, return the value
    -- in Position mode, consider it an address and return what's at the address
    -- in Relative mode, consider it an address and return what's at the address+base
    getValue :: Int -> Int -> State Computer Int
    getValue n val
      | n == 1 = go mode1
      | n == 2 = go mode2
      | n == 3 = go mode3
      where
        go :: (Computer -> Mode) -> State Computer Int
        go m = gets m >>= \case Position  -> readAt val
                                Immediate -> return val
                                Relative  -> gets base >>= ((+val) >>> readAt)


-- get a parameter representing a destination address for writing by the calling code
dest :: Int -> State Computer Int
dest i = do
  ip <- gets address
  readAt (ip+i) >>= getValue i

  where
    -- in Position mode, consider it an address and return it
    -- in Relative mode, consider it a relative address and return it+base
    getValue :: Int -> Int -> State Computer Int
    getValue n val
      | n == 1 = go mode1
      | n == 2 = go mode2
      | n == 3 = go mode3
      where
        go :: (Computer -> Mode) -> State Computer Int
        go m = gets m >>= \case Position  -> return val
                                Relative  -> gets base >>= ((+val) >>> return)


-- change an opcode at a position
update :: Address -> Int -> State Computer ()
update addy opcode = do
  memory' <- IM.insert addy opcode <$> gets memory
  modify (\c -> c { memory = memory' })

-- get a value from the input
input :: State Computer Int
input = do
  (i:is) <- gets inputs
  modify (\c -> c { inputs = is })
  return i

output :: Int -> State Computer ()
output value = do
  outputs <- gets outputs
  modify (\c -> c { outputs = value : outputs })

setMode :: Int -> Int -> State Computer ()
setMode 1 mode = modify (\c -> c { mode1 = toMode mode })
setMode 2 mode = modify (\c -> c { mode2 = toMode mode })
setMode 3 mode = modify (\c -> c { mode3 = toMode mode })

toMode 0 = Position
toMode 1 = Immediate
toMode 2 = Relative


{- Part 2 -}

calc2 :: Input -> Output
calc2 opcodes = Output result
  where
    result = evalState process start

    -- the input list is just 5, given in the problem description
    start  = initComp opcodes [2]


{- Operations -}

part1 :: String -> String
part1 = parse >>> calc1 >>> show
part2 = parse >>> calc2 >>> show

